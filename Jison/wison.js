/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var wison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,16],$V3=[1,15],$V4=[1,23],$V5=[1,22],$V6=[2,13,17],$V7=[1,40],$V8=[1,41],$V9=[2,21],$Va=[2,33],$Vb=[2,13],$Vc=[2,30],$Vd=[1,76],$Ve=[1,82],$Vf=[1,79],$Vg=[1,80],$Vh=[1,92],$Vi=[1,91],$Vj=[2,21,27],$Vk=[2,36],$Vl=[1,106],$Vm=[1,107],$Vn=[1,108],$Vo=[2,21,26],$Vp=[2,41,43],$Vq=[1,125],$Vr=[2,10,13],$Vs=[1,136],$Vt=[1,137],$Vu=[1,146],$Vv=[2,13,42,45],$Vw=[1,155],$Vx=[1,154],$Vy=[1,159],$Vz=[1,158],$VA=[1,160],$VB=[2,18,21,42,48],$VC=[42,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"inicio_wison":4,"EOF":5,"WISON":6,"INTER_A":7,"definicion_lexica":8,"definicion_sintactica":9,"INTER_C":10,"LEX":11,"LLA_A":12,"PUNTOS":13,"cuerpo_definicion_lexica":14,"LLA_C":15,"definicion_terminal":16,"TERMINAL":17,"TERMINAL_SYM":18,"FLECHA_SIMPLE":19,"declaracion_terminal":20,"PUNTO_COMA":21,"PR":22,"estructura_especial":23,"cuerpo_concatenacion":24,"concatenacion":25,"PAR_A":26,"PAR_C":27,"operador":28,"DIGIT":29,"ALL_LETTERS":30,"KLEENE":31,"MAS":32,"SYNTAX":33,"cuerpo_definicion_sintactica":34,"cuerpo":35,"definicion_no_terminales":36,"apoyo_cuerpo_definicion":37,"simbolo_inicial":38,"reglas_de_produccion":39,"no_terminal_definido":40,"NO_TERMINAL":41,"NO_TERMINAL_SYM":42,"INITIAL_SIM":43,"regla_de_produccion_definida":44,"FLECHA_DOBLE":45,"cuerpo_regla_de_produccion":46,"simbolos_regla_de_produccion":47,"OR":48,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"WISON",7:"INTER_A",10:"INTER_C",11:"LEX",12:"LLA_A",13:"PUNTOS",15:"LLA_C",17:"TERMINAL",18:"TERMINAL_SYM",19:"FLECHA_SIMPLE",21:"PUNTO_COMA",22:"PR",26:"PAR_A",27:"PAR_C",29:"DIGIT",30:"ALL_LETTERS",31:"KLEENE",32:"MAS",33:"SYNTAX",35:"cuerpo",41:"NO_TERMINAL",42:"NO_TERMINAL_SYM",43:"INITIAL_SIM",45:"FLECHA_DOBLE",48:"OR"},
productions_: [0,[3,2],[3,2],[3,1],[4,6],[4,6],[4,6],[4,5],[4,5],[8,6],[8,6],[8,6],[8,6],[8,4],[8,5],[14,2],[14,1],[16,5],[16,5],[16,5],[16,5],[16,2],[16,5],[20,1],[20,1],[20,1],[24,2],[24,1],[25,3],[25,4],[23,0],[23,2],[23,2],[28,1],[28,1],[28,1],[28,0],[9,8],[9,8],[9,8],[9,8],[9,8],[9,6],[9,6],[34,2],[37,2],[37,2],[36,2],[36,1],[40,3],[40,3],[40,2],[40,3],[40,3],[38,3],[38,3],[38,3],[39,2],[39,1],[44,4],[44,3],[44,4],[44,4],[46,2],[46,1],[47,1],[47,1],[47,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
 insertarError(this._$.first_line, this._$.first_column, 'Error'); 
break;
case 3:
 insertarError(this._$.first_line, this._$.first_column, 'Error Irrecuperable'); 
break;
case 5:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba la palabra Wison'); 
break;
case 6:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba el simbolo ¿'); 
break;
case 7:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba la instruccion Wison ¿'); 
break;
case 8:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba la instruccion ? Wison'); 
break;
case 10:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba la palabra Lex'); 
break;
case 11:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba el símbolo {'); 
break;
case 12:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba el símbolo :'); 
break;
case 13:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba la expresión Lex {:'); 
break;
case 14:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba la expresion :}'); 
break;
case 17:

                            if(listaTerminales.includes($$[$0-3])) {
                                insertarErrorSemántico(this._$.first_line, this._$.first_column, 'El simbolo terminal ' + $$[$0-3] + ' ya se encuentra definido');
                            } else {
                                listaTerminales.push($$[$0-3]); //Declaración de los no terminales, se puede modificar
                            }
                        
break;
case 18:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba la palabra Terminal'); 
break;
case 19:
 insertarError(this._$.first_line, this._$.first_column, 'Error en el símbolo terminal declarado'); 
break;
case 20:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba el simbolo ->'); 
break;
case 21:
 insertarError(this._$.first_line, this._$.first_column, 'Error en la definición del terminal'); 
break;
case 22:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba un ;'); 
break;
case 37:
 verificarReglaDeProduccion(); 
break;
case 38:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba la palabra Syntax'); 
break;
case 39: case 40:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba el sumbolo {. (Recuerde que la isntrucción exacta es: Syntax {{:}})'); 
break;
case 41:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba el simbolo :'); 
break;
case 42:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba la instrucción Syntax {{:'); 
break;
case 43:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba exactamente lo simbolos :}}'); 
break;
case 46:
 insertarError(this._$.first_line, this._$.first_column, 'Error al declarar el simbolo inicial de la gramática. La estructura debe ser: Initial_Sim \'Simbolo no terminal\' ;'); 
break;
case 49:

                            if(listaNoTerminales.includes($$[$0-1])) {
                                insertarErrorSemántico(this._$.first_line, this._$.first_column, 'El simbolo no terminal ' + $$[$0-1] + ' ya se encuentra definido');
                            } else {
                                listaNoTerminales.push($$[$0-1]);
                            }
                        
break;
case 50:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba la palabra No_Terminal'); 
break;
case 51:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba la expresión No_Terminal \'Simbolo no terminal\''); 
break;
case 52:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba un nombre válido para el símbolo no terminal'); 
break;
case 53:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba el simbolo ;'); 
break;
case 55:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba un símbolo no terminal válido para ser asignado como simbolo inicial. Verifique si el simbolo no terminal contiene caracteres inválidos o si hace falta el simbolo ; de fin de instruccion'); 
break;
case 56:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba el símbolo ;'); 
break;
case 59:

                                    if(listaNoTerminales.includes($$[$0-3])) {
                                        var reglaProduccion = new Object();
                                        reglaProduccion.simboloNoTerminal = $$[$0-3];
                                        reglaProduccion.condiciones = $$[$0-1];
                                        reglasDeProduccion.push(reglaProduccion);
                                    } else {
                                        insertarErrorSemántico(this._$.first_line, this._$.first_column, 'El simbolo no terminal ' + $$[$0-3] + ' no se encuentra definido');
                                    }
                                
break;
case 60:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba un simbolo no terminal'); 
break;
case 61:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba el simbolo <='); 
break;
case 62:
 insertarError(this._$.first_line, this._$.first_column, 'Se esperaba un simbolo ;'); 
break;
case 63:

                                    if($$[$0] !== null) {
                                        if($$[$0] === '|') {
                                            var nuevoArray = [];
                                            $$[$0-1].push(nuevoArray);
                                        } else if($$[$0-1] !== null) {
                                            //Insertamos el simbolo a la regla de producción
                                            $$[$0-1][$$[$0-1].length - 1].push($$[$0]);
                                        }
                                    }
                                    this.$ = $$[$0-1];
                                
break;
case 64:

                                    var array = [];
                                    if($$[$0] !== null) {
                                        var arrayProvisional = [];
                                        arrayProvisional.push($$[$0]);
                                        array.push(arrayProvisional);
                                    }
                                    this.$ = array;
                                
break;
case 65: case 66:

                                    if(listaTerminales.includes($$[$0]) || listaNoTerminales.includes($$[$0])) {
                                        this.$ = $$[$0]
                                    } else {
                                        insertarErrorSemántico(this._$.first_line, this._$.first_column, 'El simbolo ' + $$[$0] + ' no está definido dentro de los simbolos no terminales ni en los simbolos terminales');
                                    }
                                
break;
case 67:
this.$ = $$[$0]
break;
}
},
table: [{2:[1,3],3:1,4:2,6:[1,4]},{1:[3]},{5:[1,5]},{1:[2,3],2:$V0,5:[1,6],7:[1,7],8:8,11:$V1},{2:[1,12],7:[1,11]},{1:[2,1]},{1:[2,2]},{2:$V0,8:13,11:$V1},{2:$V2,9:14,33:$V3},{2:[1,18],12:[1,17]},{2:$V4,12:[1,19],14:20,16:21,17:$V5},{2:$V0,8:24,11:$V1},{2:$V0,8:25,11:$V1},{2:$V2,9:26,33:$V3},{10:[1,27]},{2:[1,29],12:[1,28]},{12:[1,30],35:[1,31]},{2:[1,33],13:[1,32]},{13:[1,34]},{13:[1,35]},{2:$V4,13:[1,36],16:37,17:$V5},o($V6,[2,16]),{2:[1,39],18:[1,38]},{18:$V7,21:$V8},{2:$V2,9:42,33:$V3},{2:$V2,9:43,33:$V3},{10:[1,44]},{6:[1,45]},{2:[1,47],12:[1,46]},{12:[1,48]},{12:[1,49]},{2:$V2,9:50,33:$V3},{2:$V4,14:51,16:21,17:$V5},{2:$V4,14:52,16:21,17:$V5},{2:$V4,14:53,16:21,17:$V5},{2:$V4,14:54,16:21,17:$V5},{15:[1,55]},o($V6,[2,15]),{2:[1,57],19:[1,56]},{19:[1,58]},{19:[1,59]},o($V6,$V9),{2:[1,61],10:[1,60]},{10:[1,62]},{6:[1,63]},{5:[2,7]},{2:[1,65],13:[1,64]},{13:[1,66]},{13:[1,67]},{13:[1,68]},{13:[1,69]},{2:[1,71],13:[1,70],16:37,17:$V5},{2:$V4,13:[1,72],16:37,17:$V5},{2:$V4,13:[1,73],16:37,17:$V5},{2:$V4,13:[1,74],16:37,17:$V5},o($Va,$Vb),o($V9,$Vc,{20:75,23:77,24:78,25:81,22:$Vd,26:$Ve,29:$Vf,30:$Vg}),{20:83,21:$Vc,22:$Vd,23:77,24:78,25:81,26:$Ve,29:$Vf,30:$Vg},{20:84,21:$Vc,22:$Vd,23:77,24:78,25:81,26:$Ve,29:$Vf,30:$Vg},{20:85,21:$Vc,22:$Vd,23:77,24:78,25:81,26:$Ve,29:$Vf,30:$Vg},{6:[1,86]},{5:[2,8]},{6:[1,87]},{5:[2,5]},{2:$Vh,34:88,36:89,40:90,41:$Vi},{2:$Vh,34:93,36:89,40:90,41:$Vi},{2:$Vh,34:94,36:89,40:90,41:$Vi},{2:$Vh,34:95,36:89,40:90,41:$Vi},{2:$Vh,34:96,36:89,40:90,41:$Vi},{15:[1,97]},{15:[1,98]},o($Va,[2,14],{18:$V7,21:$V8}),{15:[1,99]},{15:[1,100]},{15:[1,101]},{2:[1,103],21:[1,102]},o($V9,[2,23]),o($V9,[2,24]),o($V9,[2,25],{25:104,26:$Ve}),o($Vj,$Vk,{28:105,10:$Vl,31:$Vm,32:$Vn}),o($Vj,$Vk,{28:109,10:$Vl,31:$Vm,32:$Vn}),o($Vo,[2,27]),{18:[1,111],23:110,27:$Vc,29:$Vf,30:$Vg},{21:[1,112]},{21:[1,113]},{21:[1,114]},{5:[2,4]},{5:[2,6]},{2:[1,116],13:[1,115]},{2:[1,120],37:117,38:119,40:118,41:$Vi,43:[1,121]},o($Vp,[2,48]),{2:[1,123],42:[1,122]},{21:$Vq,42:[1,124]},{13:[1,126]},{13:[1,127]},{13:[1,128]},{13:[1,129]},{15:[1,130]},o($Va,[2,9]),o($Va,[2,12]),o($Va,[2,11]),o($Va,[2,10]),o($V6,[2,17]),o($V6,[2,22]),o($Vo,[2,26]),o($Vj,[2,31]),o($Vj,$Va),o($Vj,[2,34]),o($Vj,[2,35]),o($Vj,[2,32]),{27:[1,131]},{10:$Vl,27:$Vk,28:132,31:$Vm,32:$Vn},o($V6,[2,20]),o($V6,[2,19]),o($V6,[2,18]),{15:[1,133]},o($Vr,[2,43]),o($Vb,[2,44]),o($Vp,[2,47]),{39:134,42:$Vs,44:135,45:$Vt},{21:$Vq,39:138,42:[1,139],44:135,45:$Vt},{2:[1,141],41:[1,142],42:[1,140]},{2:[1,144],21:[1,143]},{21:[1,145]},{21:$Vu},o($Vp,[2,51]),{15:[1,147]},{15:[1,148]},{15:[1,149]},{15:[1,150]},o($Vr,[2,42]),o($Vo,[2,28]),{27:[1,151]},{15:[1,152]},o($Vb,[2,45],{44:153,42:$Vs,45:$Vt}),o($Vv,[2,58]),{2:$Vw,45:$Vx},{18:$Vy,42:$Vz,46:156,47:157,48:$VA},o($Vb,[2,46],{44:153,42:$Vs,45:$Vt}),{2:$Vw,21:$Vu,45:$Vx},{21:[1,161]},{21:[1,162]},{2:[1,163]},o($Vp,[2,49]),o($Vp,[2,53]),o($Vp,[2,52]),o($Vp,[2,50]),{15:[1,164]},{15:[1,165]},{15:[1,166]},{15:[1,167]},o($Vo,[2,29]),o($Vr,[2,37]),o($Vv,[2,57]),{18:$Vy,42:$Vz,46:168,47:157,48:$VA},{18:$Vy,42:$Vz,46:169,47:157,48:$VA},{18:$Vy,21:[1,170],42:$Vz,47:171,48:$VA},o($VB,[2,64]),o($VB,[2,65]),o($VB,[2,66]),o($VB,[2,67]),o($VC,[2,54]),o($VC,[2,55]),o($VC,[2,56]),o($Vr,[2,41]),o($Vr,[2,40]),o($Vr,[2,39]),o($Vr,[2,38]),{2:[1,173],18:$Vy,21:[1,172],42:$Vz,47:171,48:$VA},{18:$Vy,21:[1,174],42:$Vz,47:171,48:$VA},o($Vv,[2,60]),o($VB,[2,63]),o($Vv,[2,59]),o($Vv,[2,62]),o($Vv,[2,61])],
defaultActions: {5:[2,1],6:[2,2],45:[2,7],61:[2,8],63:[2,5],86:[2,4],87:[2,6]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var listaErrores = [];
    var listaTerminales = [];
    var listaNoTerminales = [];
    var reglasDeProduccion = [];

    function getListaErrores() {
        alert('Si entra en la funcion');
        return null;
    }

    function insertarError(linea, columna, descripcion) {
        var columnaSumada = columna + 1;
        listaErrores.push('Error Sintáctico. Linea ' + linea + ". Columna " + columnaSumada + ". Descripción: " + descripcion);
    }

    function insertarErrorSemántico(linea, columna, descripcion) {
        var columnaSumada = columna + 1;
        listaErrores.push('Error Semántico. Linea ' + linea + ". Columna " + columnaSumada + ". Descripción: " + descripcion);
    }
    
    function verificarReglaDeProduccion() {
        for(let i = 0; i < reglasDeProduccion.length; i++) {
            var produccion = reglasDeProduccion[i];
            verificarRecursividadIzquierda(produccion);
            verificarFactorizacion(produccion);
        }
    }

    function verificarRecursividadIzquierda(produccion) {
        for(let i  = 0; i < produccion.condiciones.length; i++) {
            for(let j = 0; j < produccion.condiciones[i].length-1; j++) {
                if(produccion.condiciones[i][j] === produccion.simboloNoTerminal) {
                    var cadena = '';
                    for(let k = 0; k < produccion.condiciones[i].length; k++) {
                        cadena += produccion.condiciones[i][k] + ' ';
                    }
                    listaErrores.push("Advertencia: La regla de producción del símbolo no terminal " + produccion.simboloNoTerminal + " tiene recursividad por la izquierda en su regla " + cadena + ", reescriba la regla de producción");
                }
            }
        }
    }

    function verificarFactorizacion(produccion) {
        var listaAux = [];
        for(let i  = 0; i < produccion.condiciones.length; i++) {
        
            var simbolo;
            if(produccion.condiciones[i].length === 0) {
                simbolo = 'cadenaVacia';
            } else {
                simbolo = produccion.condiciones[i][0];
            }

            if(listaAux.includes(simbolo)) {
                listaErrores.push("Advertencia: La regla de producción del simbolo no terminal " + produccion.simboloNoTerminal + " debe ser factorizada en las producciones que inician con el simbolo " + simbolo);
            } else {
                listaAux.push(simbolo);
            }
            console.log("Se encontró el simbolo: " + simbolo);
        
        }
    }

    exports.listaErrores = listaErrores;
    exports.listaTerminales = listaTerminales;
    exports.listaNoTerminales = listaNoTerminales;  
    exports.reglasDeProduccion = reglasDeProduccion;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1://Comentario de linea
break;
case 2://Comentario de Bloque
break;
case 3:return 7
break;
case 4:return 10
break;
case 5:return 12
break;
case 6:return 15
break;
case 7:return 13
break;
case 8:return 21
break;
case 9:return 19
break;
case 10:return 45
break;
case 11:return 31
break;
case 12:return 32
break;
case 13:return 26
break;
case 14:return 27      
break;
case 15:return 48
break;
case 16:return 30
break;
case 17:return 29
break;
case 18:return 6
break;
case 19:return 17
break;
case 20:return 11
break;
case 21:return 33
break;
case 22:return 41
break;
case 23:return 43
break;
case 24:return 18
break;
case 25:return 42
break;
case 26:return 22
break;
case 27:return 5
break;
case 28: listaErrores.push('Error Sintáctico. Linea ' + yy_.yylloc.first_line + ". Columna " + (yy_.yylloc.first_column + 1) + ". Descripción:" + yy_.yytext + " es un simbolo no reconocido por la gramática"); 
break;
}
},
rules: [/^(?:[ \r\t\n])/,/^(?:#.*)/,/^(?:[/][*][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:¿)/,/^(?:[?])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:;)/,/^(?:<-)/,/^(?:<=)/,/^(?:[*])/,/^(?:[+])/,/^(?:[(])/,/^(?:[)])/,/^(?:[|])/,/^(?:((\[)(aA-zZ)(\])))/,/^(?:((\[)(0-9)(\])))/,/^(?:(Wison))/,/^(?:(Terminal))/,/^(?:[L][e][x])/,/^(?:(Syntax))/,/^(?:(No_Terminal))/,/^(?:(Initial_Sim))/,/^(?:[$][_]([a-zA-Z]|[0-9]|[_])+)/,/^(?:[%][_]([a-zA-Z]|[0-9]|[_])+)/,/^(?:([\']|[\‘]|[\’])([^\' \‘ \’ \n ' ']+)([\']|[\‘]|[\’]))/,/^(?:$)/,/^(?:(.*))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = wison;
exports.Parser = wison.Parser;
exports.parse = function () { return wison.parse.apply(wison, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}